- block:

  #################################
  # PREREQUISITES FOR VPC BASED DBs
  #################################

    - name: create vpc
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        state: present
        cidr_block: "10.232.232.128/26"
        ec2_region: '{{ec2_region}}'
        ec2_access_key: '{{ec2_access_key}}'
        ec2_secret_key: '{{ec2_secret_key}}'
        security_token: '{{security_token}}'
        tags:
          Name: "{{ resource_prefix }}-vpc"
          Description: "Created by ansible-test"
      register: vpc_result

    - name: create some subnets
      ec2_vpc_subnet:
        state: present
        cidr: "{{ item.cidr }}"
        az: "{{ ec2_region}}{{ item.az }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        ec2_region: '{{ec2_region}}'
        ec2_access_key: '{{ec2_access_key}}'
        ec2_secret_key: '{{ec2_secret_key}}'
        security_token: '{{security_token}}'
      with_items:
        - az: a
          cidr: "10.232.232.128/28"
        - az: b
          cidr: "10.232.232.144/28"
      register: vpc_subnets

    - debug:
        msg: "{{ vpc_subnets.results|json_query('[].subnet.id') }}"

    - name: create db subnet group
      rds_subnet_group:
        name: "{{ resource_prefix }}-subnet-group"
        description: "{{ resource_prefix }}-subnet-group"
        subnets: "{{ vpc_subnets.results|json_query('[].subnet.id') }}"
        state: present
        ec2_region: '{{ec2_region}}'
        ec2_access_key: '{{ec2_access_key}}'
        ec2_secret_key: '{{ec2_secret_key}}'
        security_token: '{{security_token}}'

    - name: create db parameter group
      rds_param_group:
        name: "{{ resource_prefix }}-parameter-group"
        description: "{{ resource_prefix }}-parameter-group"
        state: present
        engine: postgres9.6
        ec2_region: '{{ec2_region}}'
        ec2_access_key: '{{ec2_access_key}}'
        ec2_secret_key: '{{ec2_secret_key}}'
        security_token: '{{security_token}}'

    # important in case we restart the tests after a fail.
    - name: ensure instance we are going to create is not present so create test is valid
      rds_instance:
        id: "{{ rds_instance_name }}"
        wait: yes
        state: absent
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: ensure non-existent instance is not present
      rds_instance:
        id: "ansible-test-dont-create-youll-break-the-tests"
        state: absent
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: do not create rds instance in check mode
      rds_instance:
        id:  "ansible-test-dont-create-youll-break-the-tests"
        wait_timeout: 1200
        wait: yes
        size: 5
        db_instance_class: db.t2.micro
        engine: postgres
        master_username: hello
        master_user_password: "world123$$"
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      check_mode: yes
      register: rds_instance_check_mode

    - name: check check mode said changed
      assert:
        that:
         - rds_instance_check_mode|changed

    - name: ensure non-existent instance is still not present
      rds_instance:
        id: "ansible-test-dont-create-youll-break-the-tests"
        state: absent
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: rds_non_existant_recheck

    - name: check check mode said changed
      assert:
        that: not rds_non_existant_recheck|changed

    - name: ensure non-existent snapshot is not present
      rds_snapshot:
        db_snapshot_identifier: "ansible-test-dont-create-youll-break-the-tests"
        state: absent
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: create rds instance
      rds_instance:
        id: "{{ rds_instance_name }}"
        wait_timeout: 1200
        wait: yes
        size: 5
        db_name: actual_db
        db_instance_class: db.t2.micro
        engine: postgres
        master_username: hello
        master_user_password: "world123$$"
        region: '{{ec2_region}}'
        tags:
          TagOne: hello
          TagTwo: world
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: rds_instance

    - name: check that create instance worked
      assert:
        that:
          - rds_instance|changed
          - "'TagOne' in rds_instance.instance.tags and rds_instance.instance.tags.TagOne == 'hello'"
          - "'TagTwo' in rds_instance.instance.tags and rds_instance.instance.tags.TagTwo == 'world'"

    - name: show instance details
      debug:
        var: rds_instance

    - name: get instance facts
      rds_instance_facts:
        id: "{{ rds_instance_name }}"
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: rds_instance_facts

    - name: check facts match expected instance
      assert:
        that:
         - rds_instance_facts.db_instances[0].db_instance_class == "db.t2.micro"
         - rds_instance_facts.db_instances[0].engine == "postgres"
         - rds_instance_facts.db_instances[0].allocated_storage == 5

    - name: fail to create rds instance with changed db name
      rds_instance:
        id: "{{ rds_instance_name }}"
        wait_timeout: 1200
        wait: yes
        size: 5
        db_name: cant_change_name_to_this
        db_instance_class: db.t2.micro
        engine: postgres
        master_username: hello
        master_user_password: "world123$$"
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: result
      ignore_errors: true

    - name: assert failure when trying to modify posgresql database name
      assert:
        that:
           - 'result.failed'
           - 'result.msg.startswith("Cannot modify parameter db_name")'


    - name: add tags to rds instance
      rds_instance:
        id: "{{ rds_instance_name }}"
        wait_timeout: 1200
        wait: yes
        size: 5
        db_name: actual_db
        db_instance_class: db.t2.micro
        engine: postgres
        master_username: hello
        master_user_password: "world123$$"
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
        tags:
           this: that
           thee: thou
           then: where
      register: rds_instance

    - name: check that tag modification worked
      assert:
        that:
          - rds_instance|changed
          - "'TagOne' in rds_instance.instance.tags and rds_instance.instance.tags.TagOne == 'hello'"
          - "'TagTwo' in rds_instance.instance.tags and rds_instance.instance.tags.TagTwo == 'world'"
          - "'this' in rds_instance.instance.tags and rds_instance.instance.tags.this == 'that'"
          - "'thee' in rds_instance.instance.tags and rds_instance.instance.tags.thee == 'thou'"
          - "'then' in rds_instance.instance.tags and rds_instance.instance.tags.then == 'where'"


    - name: add tags to rds instance and purge tags
      rds_instance:
        id: "{{ rds_instance_name }}"
        wait_timeout: 1200
        wait: yes
        size: 5
        db_name: actual_db
        db_instance_class: db.t2.micro
        engine: postgres
        master_username: hello
        master_user_password: "world123$$"
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
        purge_tags: yes
        tags:
           this: that
           thee: thou
           then: where
      register: rds_instance

    - name: check that tag purging worked
      assert:
        that:
          - rds_instance|changed
          - "'this' in rds_instance.instance.tags and rds_instance.instance.tags.this == 'that'"
          - "'thee' in rds_instance.instance.tags and rds_instance.instance.tags.thee == 'thou'"
          - "'then' in rds_instance.instance.tags and rds_instance.instance.tags.then == 'where'"



    - name: snapshot instance
      rds_snapshot:
        db_instance_identifier: "{{ rds_instance_name }}"
        db_snapshot_identifier: "{{ rds_instance_name }}-snapshot"
        wait_timeout: 1200
        wait: yes
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: get snapshot facts
      rds_snapshot_facts:
        db_instance_identifier: "{{ rds_instance_name }}"
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: delete snapshot
      rds_snapshot:
        db_snapshot_identifier: "{{ rds_instance_name }}-snapshot"
        state: absent
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: get instance facts again to debug
      rds_instance_facts:
        db_instance_identifier: "{{ rds_instance_name }}"
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: modify rds instance
      rds_instance:
        id: "{{ rds_instance_name }}"
        wait: yes
        size: 5
        db_instance_class: db.t2.micro
        engine: postgres
        master_username: hello
        port: 3307
        apply_immediately: yes
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: rds_instance_modify

    - name: check modify instance changed
      assert:
        that: rds_instance_modify|changed

    - name: fail to modify rds instance in check mode
      rds_instance:
        id: "{{ rds_instance_name }}"
        wait: yes
        size: 15
        db_instance_class: db.t2.micro
        engine: postgres
        master_username: hello
        port: 9998
        apply_immediately: yes
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      check_mode: yes
      register: rds_instance_modify_check_mode

    - name: check check mode said changed
      assert:
        that:
         - rds_instance_modify_check_mode|changed

    - name: "give same parameters as before so don't modify rds instance"
      rds_instance:
        id: "{{ rds_instance_name }}"
        wait: yes
        size: 5
        db_instance_class: db.t2.micro
        engine: postgres
        master_username: hello
        port: 3307
        apply_immediately: yes
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: rds_instance_no_modify

    - name: check non modify worked
      assert:
        that: not rds_instance_no_modify|changed

    - name: create rds replica
      rds_instance:
        id: "{{ rds_instance_name }}-replica"
        source_db_instance_identifier: "{{ rds_instance_name }}"
        size: 5
        db_instance_class: db.t2.micro
        engine: postgres
        master_username: hello
        wait: yes
        wait_timeout: 2000
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: promote rds replica
      rds_instance:
        id: "{{ rds_instance_name }}-replica"
        size: 5
        db_instance_class: db.t2.micro
        engine: postgres
        master_username: hello
        wait: yes
        wait_timeout: 1200
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: delete rds instance creating snapshot
      rds_instance:
        id: "{{ rds_instance_name }}"
        state: absent
        wait: yes
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: delete replica
      rds_instance:
        id: "{{ rds_instance_name }}-replica"
        state: absent
        wait: yes
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: restore from snapshot
      rds_instance:
        id: "{{ rds_instance_name }}-restore"
        snapshot: "{{ rds_instance_name }}-snapshot"
        size: 5
        db_instance_class: db.t2.micro
        engine: postgres
        master_username: hello
        wait: yes
        wait_timeout: 1200
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'

    - name: create DB in subnet group
      rds_instance:
        id: "{{ rds_instance_name }}"
        wait_timeout: 1200
        wait: yes
        size: 5
        db_name: actual_db
        db_instance_class: db.t2.micro
        db_subnet_group_name: "{{ resource_prefix }}-subnet-group"
        db_parameter_group_name: "{{ resource_prefix }}-parameter-group"
        engine: postgres
        master_username: hello
        master_user_password: "world123$$"
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: rds_instance

    - name: recreate DB in subnet group
      rds_instance:
        id: "{{ rds_instance_name }}"
        wait_timeout: 1200
        wait: yes
        size: 5
        db_name: actual_db
        db_instance_class: db.t2.micro
        db_subnet_group_name: "{{ resource_prefix }}-subnet-group"
        db_parameter_group_name: "{{ resource_prefix }}-parameter-group"
        engine: postgres
        master_username: hello
        master_user_password: "world123$$"
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: rds_instance

    - name: assert that second run didn't change
      assert:
        that:
          - rds_instance.changed

  always:
    - name: tidy up subnets
      ec2_vpc_subnet:
        state: absent
        cidr: "{{ item.cidr }}"
        az: "{{ ec2_region}}{{ item.az }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        ec2_region: '{{ec2_region}}'
        ec2_access_key: '{{ec2_access_key}}'
        ec2_secret_key: '{{ec2_secret_key}}'
        security_token: '{{security_token}}'
      with_items:
        - az: a
          cidr: "10.232.232.128/28"
        - az: b
          cidr: "10.232.232.144/28"
      ignore_errors: true

    - name: tidy up VPC
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        state: absent
        cidr_block: "10.232.232.128/26"
        ec2_region: '{{ec2_region}}'
        ec2_access_key: '{{ec2_access_key}}'
        ec2_secret_key: '{{ec2_secret_key}}'
        security_token: '{{security_token}}'
      ignore_errors: true

    - name: delete rds subnet groups
      rds_subnet_group:
        name: "{{ resource_prefix }}-subnet-group"
        state: absent
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      ignore_errors: true

    - name: delete rds parameter group
      rds_param_group:
        name: "{{ resource_prefix }}-parameter-group"
        state: absent
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      ignore_errors: true

    - name: delete rds instance
      rds_instance:
        id: "{{ rds_instance_name }}"
        state: absent
        snapshot: "{{ rds_instance_name }}-snapshot"
        wait: yes
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      ignore_errors: true

    - name: delete restored instance
      rds_instance:
        id: "{{ rds_instance_name }}-restore"
        state: absent
        wait: yes
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
