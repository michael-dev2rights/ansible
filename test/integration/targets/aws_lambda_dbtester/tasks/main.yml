---
#
#  Author: Michael De La Rue
#  based on ec2_key.yml + lambda.py

- block:

    # ============================================================

    - name: copy lambda deployment file into place
      tag: create
      copy:
        src: db_lambda.zip
        dest: "{{output_dir}}"

    - name: test state=present - upload the lambda
      tag: create
      local_action:
        module: lambda
        name: "{{lambda_function_name}}"
        runtime: "python3.6"
        handler: "db_lambda.handler"
        role: "ansible_lambda_role"
        ec2_region: '{{ec2_region}}'
        ec2_access_key: '{{ec2_access_key}}'
        ec2_secret_key: '{{ec2_secret_key}}'
        security_token: '{{security_token}}'
        zip_file: "{{output_dir}}/db_lambda.zip"
      register: result

    - name: test state=present - update the lambda to have some environment variaibles
      tag: create
      local_action:
        module: lambda
        name: "{{lambda_function_name}}"
        runtime: "python3.6"
        handler: "db_lambda.handler"
        role: "ansible_lambda_vpc"
        ec2_region: '{{ec2_region}}'
        ec2_access_key: '{{ec2_access_key}}'
        ec2_secret_key: '{{ec2_secret_key}}'
        security_token: '{{security_token}}'
        zip_file: "{{output_dir}}/db_lambda.zip"
        timeout: 25
        environment_variables:
          DB_HOST="{{ rds_host }}"
          DB_PORT=5432
          DB_NAME=postgres
          DB_USER=hello
          DB_PASSWORD='world123$$'
        vpc_subnet_ids: "{{ vpc_subnets }}"
        vpc_security_group_ids: "{{ vpc_security_groups }}"
      register: result

    - name: assert lambda upload succeeded
      tag: create
      assert:
        that:
           - 'not result|failed'

    - name: test lambda works
      tag: create
      local_action:
        module: execute_lambda
        name: "{{lambda_function_name}}"
        payload:
          command: ping
        ec2_region: '{{ec2_region}}'
        ec2_access_key: '{{ec2_access_key}}'
        ec2_secret_key: '{{ec2_secret_key}}'
        security_token: '{{security_token}}'
      register: result

    - name: assert lambda manages to respond as expected
      tag: create
      assert:
        that:
           - 'not result|failed'
           - 'result.result.output.return == "pong"'

  # always:

  #   # ============================================================
  #   - name: test state is absent (expect changed is False)
  #     tag: delete
  #     lambda:
  #       name: "{{lambda_function_name}}"
  #       ec2_region: '{{ec2_region}}'
  #       ec2_access_key: '{{ec2_access_key}}'
  #       ec2_secret_key: '{{ec2_secret_key}}'
  #       security_token: '{{security_token}}'
  #       state: absent
  #     register: result

  #   - name: assert state is absent
  #     tag: delete
  #     assert:
  #       that:
  #          - 'not result|failed'
  #          - 'result.changed == False'
