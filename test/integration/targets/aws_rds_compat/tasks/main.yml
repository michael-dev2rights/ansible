- block:
    - name: Given that I have created an RDS with the old rds module
      tags: test_amazon_rds
      rds:
        region: "{{ ec2_region }}"
        command: create
        instance_name: "{{ rds_instance_name }}"
        db_engine: postgres
        size: 10
        instance_type: "db.t2.micro"
        username: "{{ rds_master_db_user }}"
        password: "{{ rds_db_master_password }}"
        publicly_accessible: no
        wait: yes
        wait_timeout: 1200 # 600 doesn't cut it!!
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: rds_result

    - name: When I run the new module with unchanged parameters
      tags: test_amazon_rds
      rds_instance:
        region: "{{ ec2_region }}"
        state: present
        instance_name: "{{ rds_instance_name }}"
        db_engine: postgres
        size: 10
        instance_type: "db.t2.micro"
        username: "{{ rds_master_db_user }}"
        password: "{{ rds_db_master_password }}"
        publicly_accessible: no
        wait: yes
        wait_timeout: 1200 # 600 doesn't cut it!!
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: rds_instance_result

    - name: Then the RDS should not be changed
      tags: test_amazon_rds
      assert:
        that:
          - 'rds_result|changed'
          - 'not rds_instance_result|changed'
          - 'not rds_result|failed'
          - 'not rds_instance_result|failed'

  
    # note; we probably inherit the RDS from the previous test
    # which will be faster.
    - name: Given that I have created an RDS with the old rds module
      tags: test_amazon_rds
      rds:
        region: "{{ ec2_region }}"
        command: create
        instance_name: "{{ rds_instance_name }}"
        db_engine: postgres
        size: 10
        instance_type: "db.t2.micro"
        username: "{{ rds_master_db_user }}"
        password: "{{ rds_db_master_password }}"
        publicly_accessible: no
        wait: yes
        wait_timeout: 1200 # 600 doesn't cut it!!
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: rds_result


    - name: When I run the new module with SSD configuration
      tags: test_amazon_rds
      rds_instance:
        region: "{{ ec2_region }}"
        state: present
        storage_type: gp2
        instance_name: "{{ rds_instance_name }}"
        db_engine: postgres
        size: 10
        instance_type: "db.t2.micro"
        username: "{{ rds_master_db_user }}"
        password: "{{ rds_db_master_password }}"
        publicly_accessible: no
        wait: yes
        apply_immediately: yes
        wait_timeout: 1200 # 600 doesn't cut it!!
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: result

    - name: Then the RDS should have SSD disks
      assert:
        that:
          - 'result.instance.storage_type == "gp2"'

  #We should probably delete the RDS at this point

    - name: Given that I have created an RDS with the new rds_instance module
      tags: test_amazon_rds
      rds_instance:
        region: "{{ ec2_region }}"
        state: present
        storage_type: gp2
        instance_name: "{{ rds_instance_name }}"
        db_engine: postgres
        size: 10
        instance_type: "db.t2.micro"
        username: "{{ rds_master_db_user }}"
        password: "{{ rds_db_master_password }}"
        publicly_accessible: no
        apply_immediately: yes
        wait: yes
        wait_timeout: 1200 # 600 doesn't cut it!!
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: result

    - name: When I run the old module with matching parameters
      tags: test_amazon_rds
      rds:
        region: "{{ ec2_region }}"
        command: create
        instance_name: "{{ rds_instance_name }}"
        db_engine: postgres
        size: 10
        instance_type: "db.t2.micro"
        username: "{{ rds_master_db_user }}"
        password: "{{ rds_db_master_password }}"
        publicly_accessible: no
        wait: yes
        wait_timeout: 1200 # 600 doesn't cut it!!
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: rds_result

    - name: And I enforce the configuration with the new rds_instance module
      tags: test_amazon_rds
      rds_instance:
        region: "{{ ec2_region }}"
        state: present
        storage_type: gp2
        instance_name: "{{ rds_instance_name }}"
        db_engine: postgres
        size: 10
        instance_type: "db.t2.micro"
        username: "{{ rds_master_db_user }}"
        password: "{{ rds_db_master_password }}"
        publicly_accessible: no
        apply_immediately: yes
        wait: yes
        wait_timeout: 1200 # 600 doesn't cut it!!
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: result

    - name: Then the RDS should not be changed
      tags: test_amazon_rds
      assert:
        that:
          - 'not result|changed'
          - 'not result|failed'
          - 'result.instance.storage_type == "gp2"'

    - name: Given that I have an RDS with SSD disks
      tags: test_amazon_rds
      rds_instance:
        region: "{{ ec2_region }}"
        state: present
        storage_type: gp2
        instance_name: "{{ rds_instance_name }}"
        db_engine: postgres
        size: 10
        instance_type: "db.t2.micro"
        username: "{{ rds_master_db_user }}"
        password: "{{ rds_db_master_password }}"
        publicly_accessible: no
        wait: yes
        wait_timeout: 1200 # 600 doesn't cut it!!
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
      register: result

  #Currently covered by previous test - but check that if changing
  #  - name: When I run the old module with matching parameters except SSD
  #  - name: Then the RDS should not be changed
  #  - name: And the RDS should have SSD disks

  #@future?
    # - name: Given that I create an RDS which has parameters unsupported by the old module
    # - name: Then that module should have a default tag warning that it is new
    # - name: And the old rds module should refuse to update RDS
    # - name: Given that I have an RDS instance

  # see https://github.com/ansible/ansible/issues/20395 which should be updated
  # when this test is implemented.

    # - name: When I attempt to modify that instance adding new tags
    # tasks:
    #   rds:
    #     command: modify
    #     instance_name: "{{ item.name }}"
    #     tags:
    #       dept: "{{ item.dept }}"
    #       app_name: "{{ item.app_name }}"
    #       project_name: "{{ item.project_name }}"
    #       owner_email: "{{ item.owner_email }}"

    # - name: Then those tags should be added to the RDS instance.

  always:

    - name: delete rds instance
      rds_instance:
        instance_name: "{{ rds_instance_name }}"
        state: absent
        snapshot: "{{ rds_instance_name }}-snapshot"
        wait: yes
        region: '{{ec2_region}}'
        aws_access_key: '{{aws_access_key}}'
        aws_secret_key: '{{aws_secret_key}}'
        security_token: '{{security_token}}'
        wait_timeout: 1200 # 600 doesn't cut it - even for delete!!
      ignore_errors: true
